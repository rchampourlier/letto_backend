// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "letto": Application Contexts
//
// Command:
// $ goagen
// --design=gitlab.com/letto/letto_backend/design
// --out=$(GOPATH)/src/gitlab.com/letto/letto_backend
// --version=v1.3.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"unicode/utf8"
)

// HealthHealthContext provides the health health action context.
type HealthHealthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewHealthHealthContext parses the incoming request URL and body, performs validations and creates the
// context used by the health controller health action.
func NewHealthHealthContext(ctx context.Context, r *http.Request, service *goa.Service) (*HealthHealthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := HealthHealthContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *HealthHealthContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// WebhookTriggersContext provides the triggers webhook action context.
type WebhookTriggersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Group string
}

// NewWebhookTriggersContext parses the incoming request URL and body, performs validations and creates the
// context used by the triggers controller webhook action.
func NewWebhookTriggersContext(ctx context.Context, r *http.Request, service *goa.Service) (*WebhookTriggersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := WebhookTriggersContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramGroup := req.Params["group"]
	if len(paramGroup) > 0 {
		rawGroup := paramGroup[0]
		rctx.Group = rawGroup
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *WebhookTriggersContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// CreateWorkflowContext provides the workflow create action context.
type CreateWorkflowContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateWorkflowPayload
}

// NewCreateWorkflowContext parses the incoming request URL and body, performs validations and creates the
// context used by the workflow controller create action.
func NewCreateWorkflowContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateWorkflowContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateWorkflowContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createWorkflowPayload is the workflow create action payload.
type createWorkflowPayload struct {
	Path       *string `form:"path,omitempty" json:"path,omitempty" xml:"path,omitempty"`
	SourceCode *string `form:"source_code,omitempty" json:"source_code,omitempty" xml:"source_code,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createWorkflowPayload) Validate() (err error) {
	if payload.Path == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "path"))
	}
	if payload.SourceCode == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "source_code"))
	}
	if payload.Path != nil {
		if utf8.RuneCountInString(*payload.Path) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.path`, *payload.Path, utf8.RuneCountInString(*payload.Path), 1, true))
		}
	}
	if payload.SourceCode != nil {
		if utf8.RuneCountInString(*payload.SourceCode) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.source_code`, *payload.SourceCode, utf8.RuneCountInString(*payload.SourceCode), 1, true))
		}
	}
	return
}

// Publicize creates CreateWorkflowPayload from createWorkflowPayload
func (payload *createWorkflowPayload) Publicize() *CreateWorkflowPayload {
	var pub CreateWorkflowPayload
	if payload.Path != nil {
		pub.Path = *payload.Path
	}
	if payload.SourceCode != nil {
		pub.SourceCode = *payload.SourceCode
	}
	return &pub
}

// CreateWorkflowPayload is the workflow create action payload.
type CreateWorkflowPayload struct {
	Path       string `form:"path" json:"path" xml:"path"`
	SourceCode string `form:"source_code" json:"source_code" xml:"source_code"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateWorkflowPayload) Validate() (err error) {
	if payload.Path == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "path"))
	}
	if payload.SourceCode == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "source_code"))
	}
	if utf8.RuneCountInString(payload.Path) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.path`, payload.Path, utf8.RuneCountInString(payload.Path), 1, true))
	}
	if utf8.RuneCountInString(payload.SourceCode) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.source_code`, payload.SourceCode, utf8.RuneCountInString(payload.SourceCode), 1, true))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateWorkflowContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateWorkflowContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateWorkflowContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DeleteWorkflowContext provides the workflow delete action context.
type DeleteWorkflowContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	WorkflowID string
}

// NewDeleteWorkflowContext parses the incoming request URL and body, performs validations and creates the
// context used by the workflow controller delete action.
func NewDeleteWorkflowContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteWorkflowContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteWorkflowContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramWorkflowID := req.Params["workflowID"]
	if len(paramWorkflowID) > 0 {
		rawWorkflowID := paramWorkflowID[0]
		rctx.WorkflowID = rawWorkflowID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteWorkflowContext) OK(r *LettoWorkflow) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/letto.workflow+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *DeleteWorkflowContext) OKFull(r *LettoWorkflowFull) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/letto.workflow+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ListWorkflowContext provides the workflow list action context.
type ListWorkflowContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListWorkflowContext parses the incoming request URL and body, performs validations and creates the
// context used by the workflow controller list action.
func NewListWorkflowContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListWorkflowContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListWorkflowContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListWorkflowContext) OK(r LettoWorkflowCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/letto.workflow+json; type=collection")
	if r == nil {
		r = LettoWorkflowCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ListWorkflowContext) OKFull(r LettoWorkflowFullCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/letto.workflow+json; type=collection")
	if r == nil {
		r = LettoWorkflowFullCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ReadWorkflowContext provides the workflow read action context.
type ReadWorkflowContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	WorkflowID string
}

// NewReadWorkflowContext parses the incoming request URL and body, performs validations and creates the
// context used by the workflow controller read action.
func NewReadWorkflowContext(ctx context.Context, r *http.Request, service *goa.Service) (*ReadWorkflowContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ReadWorkflowContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramWorkflowID := req.Params["workflowID"]
	if len(paramWorkflowID) > 0 {
		rawWorkflowID := paramWorkflowID[0]
		rctx.WorkflowID = rawWorkflowID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ReadWorkflowContext) OK(r *LettoWorkflow) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/letto.workflow+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ReadWorkflowContext) OKFull(r *LettoWorkflowFull) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/letto.workflow+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// UpdateWorkflowContext provides the workflow update action context.
type UpdateWorkflowContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	WorkflowID string
	Payload    *UpdateWorkflowPayload
}

// NewUpdateWorkflowContext parses the incoming request URL and body, performs validations and creates the
// context used by the workflow controller update action.
func NewUpdateWorkflowContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateWorkflowContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateWorkflowContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramWorkflowID := req.Params["workflowID"]
	if len(paramWorkflowID) > 0 {
		rawWorkflowID := paramWorkflowID[0]
		rctx.WorkflowID = rawWorkflowID
	}
	return &rctx, err
}

// updateWorkflowPayload is the workflow update action payload.
type updateWorkflowPayload struct {
	Path       *string `form:"path,omitempty" json:"path,omitempty" xml:"path,omitempty"`
	SourceCode *string `form:"source_code,omitempty" json:"source_code,omitempty" xml:"source_code,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateWorkflowPayload) Validate() (err error) {
	if payload.Path == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "path"))
	}
	if payload.SourceCode == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "source_code"))
	}
	if payload.Path != nil {
		if utf8.RuneCountInString(*payload.Path) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.path`, *payload.Path, utf8.RuneCountInString(*payload.Path), 1, true))
		}
	}
	if payload.SourceCode != nil {
		if utf8.RuneCountInString(*payload.SourceCode) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.source_code`, *payload.SourceCode, utf8.RuneCountInString(*payload.SourceCode), 1, true))
		}
	}
	return
}

// Publicize creates UpdateWorkflowPayload from updateWorkflowPayload
func (payload *updateWorkflowPayload) Publicize() *UpdateWorkflowPayload {
	var pub UpdateWorkflowPayload
	if payload.Path != nil {
		pub.Path = *payload.Path
	}
	if payload.SourceCode != nil {
		pub.SourceCode = *payload.SourceCode
	}
	return &pub
}

// UpdateWorkflowPayload is the workflow update action payload.
type UpdateWorkflowPayload struct {
	Path       string `form:"path" json:"path" xml:"path"`
	SourceCode string `form:"source_code" json:"source_code" xml:"source_code"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateWorkflowPayload) Validate() (err error) {
	if payload.Path == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "path"))
	}
	if payload.SourceCode == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "source_code"))
	}
	if utf8.RuneCountInString(payload.Path) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.path`, payload.Path, utf8.RuneCountInString(payload.Path), 1, true))
	}
	if utf8.RuneCountInString(payload.SourceCode) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.source_code`, payload.SourceCode, utf8.RuneCountInString(payload.SourceCode), 1, true))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateWorkflowContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateWorkflowContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateWorkflowContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
