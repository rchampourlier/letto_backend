// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "letto": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/rchampourlier/letto_backend/design
// --out=$(GOPATH)/src/github.com/rchampourlier/letto_backend
// --version=v1.3.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// WebhookTriggersContext provides the triggers webhook action context.
type WebhookTriggersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Group string
}

// NewWebhookTriggersContext parses the incoming request URL and body, performs validations and creates the
// context used by the triggers controller webhook action.
func NewWebhookTriggersContext(ctx context.Context, r *http.Request, service *goa.Service) (*WebhookTriggersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := WebhookTriggersContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramGroup := req.Params["group"]
	if len(paramGroup) > 0 {
		rawGroup := paramGroup[0]
		rctx.Group = rawGroup
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *WebhookTriggersContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// CreateWorkflowContext provides the workflow create action context.
type CreateWorkflowContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateWorkflowPayload
}

// NewCreateWorkflowContext parses the incoming request URL and body, performs validations and creates the
// context used by the workflow controller create action.
func NewCreateWorkflowContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateWorkflowContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateWorkflowContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createWorkflowPayload is the workflow create action payload.
type createWorkflowPayload struct {
	// A way of grouping workflows together to be triggered by a specific endpoint's URL
	Group *string `form:"group,omitempty" json:"group,omitempty" xml:"group,omitempty"`
	// Name of the workflow
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Source code to execute for this workflow
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createWorkflowPayload) Validate() (err error) {
	if payload.Source == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "source"))
	}
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Group == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "group"))
	}
	if payload.Group != nil {
		if ok := goa.ValidatePattern(`\A[\w-]+\z`, *payload.Group); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`raw.group`, *payload.Group, `\A[\w-]+\z`))
		}
	}
	return
}

// Publicize creates CreateWorkflowPayload from createWorkflowPayload
func (payload *createWorkflowPayload) Publicize() *CreateWorkflowPayload {
	var pub CreateWorkflowPayload
	if payload.Group != nil {
		pub.Group = *payload.Group
	}
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	if payload.Source != nil {
		pub.Source = *payload.Source
	}
	return &pub
}

// CreateWorkflowPayload is the workflow create action payload.
type CreateWorkflowPayload struct {
	// A way of grouping workflows together to be triggered by a specific endpoint's URL
	Group string `form:"group" json:"group" xml:"group"`
	// Name of the workflow
	Name string `form:"name" json:"name" xml:"name"`
	// Source code to execute for this workflow
	Source string `form:"source" json:"source" xml:"source"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateWorkflowPayload) Validate() (err error) {
	if payload.Source == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "source"))
	}
	if payload.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Group == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "group"))
	}
	if ok := goa.ValidatePattern(`\A[\w-]+\z`, payload.Group); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`raw.group`, payload.Group, `\A[\w-]+\z`))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateWorkflowContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateWorkflowContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateWorkflowContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DeleteWorkflowContext provides the workflow delete action context.
type DeleteWorkflowContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	WorkflowUUID string
}

// NewDeleteWorkflowContext parses the incoming request URL and body, performs validations and creates the
// context used by the workflow controller delete action.
func NewDeleteWorkflowContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteWorkflowContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteWorkflowContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramWorkflowUUID := req.Params["workflowUUID"]
	if len(paramWorkflowUUID) > 0 {
		rawWorkflowUUID := paramWorkflowUUID[0]
		rctx.WorkflowUUID = rawWorkflowUUID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteWorkflowContext) OK(r *LettoWorkflow) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/letto.workflow+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *DeleteWorkflowContext) OKFull(r *LettoWorkflowFull) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/letto.workflow+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *DeleteWorkflowContext) OKLink(r *LettoWorkflowLink) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/letto.workflow+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ListWorkflowContext provides the workflow list action context.
type ListWorkflowContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListWorkflowContext parses the incoming request URL and body, performs validations and creates the
// context used by the workflow controller list action.
func NewListWorkflowContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListWorkflowContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListWorkflowContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListWorkflowContext) OK(r *LettoWorkflowList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/letto.workflow_list+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ReadWorkflowContext provides the workflow read action context.
type ReadWorkflowContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	WorkflowUUID string
}

// NewReadWorkflowContext parses the incoming request URL and body, performs validations and creates the
// context used by the workflow controller read action.
func NewReadWorkflowContext(ctx context.Context, r *http.Request, service *goa.Service) (*ReadWorkflowContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ReadWorkflowContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramWorkflowUUID := req.Params["workflowUUID"]
	if len(paramWorkflowUUID) > 0 {
		rawWorkflowUUID := paramWorkflowUUID[0]
		rctx.WorkflowUUID = rawWorkflowUUID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ReadWorkflowContext) OK(r *LettoWorkflow) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/letto.workflow+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ReadWorkflowContext) OKFull(r *LettoWorkflowFull) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/letto.workflow+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ReadWorkflowContext) OKLink(r *LettoWorkflowLink) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/letto.workflow+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// UpdateWorkflowContext provides the workflow update action context.
type UpdateWorkflowContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	WorkflowUUID string
}

// NewUpdateWorkflowContext parses the incoming request URL and body, performs validations and creates the
// context used by the workflow controller update action.
func NewUpdateWorkflowContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateWorkflowContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateWorkflowContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramWorkflowUUID := req.Params["workflowUUID"]
	if len(paramWorkflowUUID) > 0 {
		rawWorkflowUUID := paramWorkflowUUID[0]
		rctx.WorkflowUUID = rawWorkflowUUID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateWorkflowContext) OK(r *LettoWorkflow) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/letto.workflow+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *UpdateWorkflowContext) OKFull(r *LettoWorkflowFull) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/letto.workflow+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *UpdateWorkflowContext) OKLink(r *LettoWorkflowLink) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/letto.workflow+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}
