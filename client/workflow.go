// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "letto": workflow Resource Client
//
// Command:
// $ goagen
// --design=github.com/rchampourlier/letto_go/design
// --out=$(GOPATH)/src/github.com/rchampourlier/letto_go
// --version=v1.2.0-dirty

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateWorkflowPath computes a request path to the create action of workflow.
func CreateWorkflowPath() string {

	return fmt.Sprintf("/workflows/")
}

// Create a new workflow
func (c *Client) CreateWorkflow(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewCreateWorkflowRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateWorkflowRequest create the request corresponding to the create action endpoint of the workflow resource.
func (c *Client) NewCreateWorkflowRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteWorkflowPath computes a request path to the delete action of workflow.
func DeleteWorkflowPath(workflowUUID string) string {
	param0 := workflowUUID

	return fmt.Sprintf("/workflows/%s", param0)
}

// Delete a workflow by UUID
func (c *Client) DeleteWorkflow(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteWorkflowRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteWorkflowRequest create the request corresponding to the delete action endpoint of the workflow resource.
func (c *Client) NewDeleteWorkflowRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListWorkflowPath computes a request path to the list action of workflow.
func ListWorkflowPath() string {

	return fmt.Sprintf("/workflows/")
}

// List workflows
func (c *Client) ListWorkflow(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListWorkflowRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListWorkflowRequest create the request corresponding to the list action endpoint of the workflow resource.
func (c *Client) NewListWorkflowRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ReadWorkflowPath computes a request path to the read action of workflow.
func ReadWorkflowPath(workflowUUID string) string {
	param0 := workflowUUID

	return fmt.Sprintf("/workflows/%s", param0)
}

// Read a workflow by UUID
func (c *Client) ReadWorkflow(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewReadWorkflowRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewReadWorkflowRequest create the request corresponding to the read action endpoint of the workflow resource.
func (c *Client) NewReadWorkflowRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateWorkflowPath computes a request path to the update action of workflow.
func UpdateWorkflowPath(workflowUUID string) string {
	param0 := workflowUUID

	return fmt.Sprintf("/workflows/%s", param0)
}

// Update an existing workflow by UUID
func (c *Client) UpdateWorkflow(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewUpdateWorkflowRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateWorkflowRequest create the request corresponding to the update action endpoint of the workflow resource.
func (c *Client) NewUpdateWorkflowRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
